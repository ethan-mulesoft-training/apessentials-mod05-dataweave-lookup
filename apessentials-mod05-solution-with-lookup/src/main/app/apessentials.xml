<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
	<http:listener-config name="HTTP_Listener_Configuration"
		host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration" />
	<http:request-config name="United_REST_Request_Configuration"
		host="ilt.mulesoft-training.com" port="80" basePath="/essentials/united/flights"
		doc:name="HTTP Request Configuration" />
	<http:request-config name="Bank_REST_Request_Configuration"
		host="training.cloudhub.io" port="80" basePath="/build/banking/rest"
		doc:name="HTTP Request Configuration">
		<http:raml-api-configuration
			location="https://anypoint.mulesoft.com/apiplatform/repository/public/organizations/1203/apis/9565/versions/9867/files/root" />
	</http:request-config>





	<ws:consumer-config name="Delta_Web_Service_Consumer"
		service="TicketServiceService" port="TicketServicePort"
		serviceAddress="http://training.cloudhub.io/essentials/delta"
		wsdlLocation="http://ilt.mulesoft-training.com/essentials/delta?wsdl"
		doc:name="Web Service Consumer" />
	<db:mysql-config name="Training_MySQL_Configuration"
		host="iltdb.mulesoft-training.com" port="3306" user="mule" password="mule"
		database="training" doc:name="MySQL Configuration" />
	<jms:activemq-connector name="Active_MQ"
		specification="1.1" brokerURL="tcp://54.69.115.37:61616"
		validateConnections="true" doc:name="Active MQ" />


	<configuration doc:name="Configuration">
		<expression-language>
			<global-functions>
				def getNumSeats(type){
					if (type.contains('777')){
						return 270;
					}
					else {
						return 220;
					}
				}
			</global-functions>

		</expression-language>

		<http:config useTransportForUris="false" />
	</configuration>

	<flow name="getTotalSeats">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/totalseats" allowedMethods="GET" doc:name="HTTP" />
		<expression-component doc:name="Expression"><![CDATA[if (payload.plane contains "777"){
	payload = 276;
}
else {
	payload =219;
}]]></expression-component>
	</flow>


	<flow name="transformStaticFlightsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/static" allowedMethods="GET" doc:name="HTTP" />
		<set-payload
			value="&lt;ns2:listAllFlightsResponse xmlns:ns2=&quot;http://soap.training.mulesoft.com/&quot;&gt;&lt;return airlineName=&quot;United&quot;&gt;&lt;code&gt;A1B2C3&lt;/code&gt;&lt;departureDate&gt;2015/10/20&lt;/departureDate&gt;&lt;destination&gt;SFO&lt;/destination&gt;&lt;emptySeats&gt;40&lt;/emptySeats&gt;&lt;origin&gt;MUA&lt;/origin&gt;&lt;planeType&gt;Boing 737&lt;/planeType&gt;&lt;price&gt;400.0&lt;/price&gt;&lt;/return&gt;&lt;return airlineName=&quot;Delta&quot;&gt;&lt;code&gt;A1B2C4&lt;/code&gt;&lt;departureDate&gt;2015/10/21&lt;/departureDate&gt;&lt;destination&gt;LAX&lt;/destination&gt;&lt;emptySeats&gt;10&lt;/emptySeats&gt;&lt;origin&gt;MUA&lt;/origin&gt;&lt;planeType&gt;Boing 737&lt;/planeType&gt;&lt;price&gt;199.99&lt;/price&gt;&lt;/return&gt;&lt;return airlineName=&quot;Delta&quot;&gt;&lt;code&gt;AFFFC5&lt;/code&gt;&lt;departureDate&gt;2015/10/21&lt;/departureDate&gt;&lt;destination&gt;PDX&lt;/destination&gt;&lt;emptySeats&gt;30&lt;/emptySeats&gt;&lt;origin&gt;MUA&lt;/origin&gt;&lt;planeType&gt;Boing 777&lt;/planeType&gt;&lt;price&gt;283.0&lt;/price&gt;&lt;/return&gt;&lt;return airlineName=&quot;Delta&quot;&gt;&lt;code&gt;AFFFC4&lt;/code&gt;&lt;departureDate&gt;2015/10/20&lt;/departureDate&gt;&lt;destination&gt;PDX&lt;/destination&gt;&lt;emptySeats&gt;0&lt;/emptySeats&gt;&lt;origin&gt;MUA&lt;/origin&gt;&lt;planeType&gt;Boing 777&lt;/planeType&gt;&lt;price&gt;283.0&lt;/price&gt;&lt;/return&gt;&lt;return airlineName=&quot;Delta&quot;&gt;&lt;code&gt;AFFFC3&lt;/code&gt;&lt;departureDate&gt;2015/10/20&lt;/departureDate&gt;&lt;destination&gt;PDX&lt;/destination&gt;&lt;emptySeats&gt;23&lt;/emptySeats&gt;&lt;origin&gt;MUA&lt;/origin&gt;&lt;planeType&gt;Boing 777&lt;/planeType&gt;&lt;price&gt;283.0&lt;/price&gt;&lt;/return&gt;&lt;/ns2:listAllFlightsResponse&gt;"
			mimeType="application/xml" doc:name="Set Payload" />
		<dw:transform-message doc:name="Transform Message">
			<dw:input-payload doc:sample="sample_data/empty.xml" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
%type currency = :number {format: "###"}
%type flight = :object {class: "com.mulesoft.training.Flight"}
---
(flights: payload.listAllFlightsResponse.*return map {
		destination: $.destination,
		price: $.price as :currency,
		planeType: upper $.planeType replace /(BOING)/ with "BOEING",
		departureDate: $.departureDate as :date {format: "yyyy/MM/dd"} as :string {format: "MMM dd, yyyy"},
		availableSeats: $.emptySeats as :number 
} as :flight) orderBy $.departureDate orderBy $.price distinctBy $
filter ($.availableSeats !=0)
]]></dw:set-payload>
		</dw:transform-message>
		<logger level="INFO" doc:name="Logger" />
	</flow>
	<flow name="getFlightFormFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/flights" allowedMethods="GET" doc:name="HTTP" />
		<parse-template location="FlightFinder.html" doc:name="Parse Template" />
		<logger level="INFO" doc:name="Logger" />
	</flow>
	<flow name="getFlightsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/flights" allowedMethods="POST" doc:name="HTTP" />
		<dw:transform-message doc:name="Set payload and destination flowVar">
			<dw:input-payload doc:sample="sample_data/json.json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
			<dw:set-variable variableName="destination"><![CDATA[%dw 1.0
%output application/java
---
payload.destination]]></dw:set-variable>
			<dw:set-variable variableName="json"><![CDATA[%dw 1.0
%output application/json
---
data: {
	hub: "MUA",
	code: payload.destination,
	airline: payload.airline
}]]></dw:set-variable>
			<dw:set-variable variableName="xml"><![CDATA[%dw 1.0
%output application/xml
---
data: {
	hub: "MUA",
	flight @(airline: payload.airline): {
		code: payload.destination
	}	
}]]></dw:set-variable>
		</dw:transform-message>
		<logger level="INFO" doc:name="Logger" />
	</flow>
	<flow name="getCSVAccountsFlow">
		<file:inbound-endpoint path="src/main/resources/input"
			moveToPattern="#[message.inboundProperties.originalFilename].backup"
			moveToDirectory="src/main/resources/output" responseTimeout="10000"
			doc:name="File">
			<file:filename-regex-filter pattern=".*csv"
				caseSensitive="false" />
		</file:inbound-endpoint>
		<file:file-to-string-transformer
			doc:name="File to String" />
		<logger message="#[payload]" level="INFO" doc:name="Logger" />
	</flow>
	<flow name="getTopicMessagesFlow">
		<jms:inbound-endpoint topic="apessentials"
			connector-ref="Active_MQ" doc:name="JMS" />
		<logger message="#[message.inboundProperties.name + &quot;: &quot; + payload]"
			level="INFO" doc:name="Logger" />
	</flow>
	<flow name="postTopicMessageFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/jms" allowedMethods="GET" doc:name="HTTP" />
		<set-payload
			value="#[message.inboundProperties.'http.query.params'.message]"
			doc:name="Set Message" />
		<set-property propertyName="name" value="Max" doc:name="Set Name" />
		<jms:outbound-endpoint topic="apessentials"
			connector-ref="Active_MQ" doc:name="JMS" />
	</flow>
	<flow name="getAmericanFlightsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/american" allowedMethods="GET" doc:name="HTTP" />
		<set-variable variableName="destination"
			value="#[(message.inboundProperties.'http.query.params'.code == empty) ? 'SFO' : message.inboundProperties.'http.query.params'.code]"
			doc:name="Set Destination" />
		<db:select config-ref="Training_MySQL_Configuration"
			doc:name="American DB Request">
			<db:parameterized-query><![CDATA[SELECT * FROM flights WHERE toAirport = #[flowVars.destination]]]></db:parameterized-query>
		</db:select>
		<dw:transform-message doc:name="Java to Java" metadata:id="9fc4801b-bbbb-44a7-b898-f6252f9bba5f">
			<dw:input-payload doc:sample="sample_data/list_map.dwl" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
%type flight = :object {class: "com.mulesoft.training.Flight"}
---
payload map {
	airlineName: $.airlineName,
	departureDate: $.takeOffDate,
	destination: $.toAirport,
	emptySeats: $.seatsAvailable as :number unless $.seatsAvailable=="none" otherwise 0,
	flightCode: $.code1 ++ $.code2,
	origination: $.fromAirport,
	planeType: $.planeType,
	price: $.price as :number {format: "###.##"},
	//totalSeats: getNumSeats($.planeType)
   totalSeats: lookup("getTotalSeats",{plane: $.planeType})
    
} as :flight]]></dw:set-payload>
		</dw:transform-message>
		<logger message="#['\n****American reply:'+payload]" level="INFO" doc:name="Logger" />
	</flow>
	<flow name="getDeltaFlightsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/delta" doc:name="HTTP" allowedMethods="GET" />
		<set-variable variableName="destination"
			value="#[(message.inboundProperties.'http.query.params'.code == empty) ? 'SFO' : message.inboundProperties.'http.query.params'.code]"
			doc:name="Set Destination" />
		<dw:transform-message doc:name="Pass Destination">
			<dw:input-variable doc:sample="sample_data/map_string_string.dwl"
				variableName="destination" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
{
	ns0#findFlight: {
		destination: flowVars.destination as :string
	}
}]]></dw:set-payload>
		</dw:transform-message>
		<ws:consumer config-ref="Delta_Web_Service_Consumer"
			operation="findFlight" doc:name="Delta SOAP Request" />
		<dw:transform-message 
			doc:name="XML to Java" metadata:id="992910fa-041c-4a33-9939-cf1e5d22c912">
			<dw:input-payload doc:sample="sample_data/listAllFlightsResponse_7.xml" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://soap.training.mulesoft.com/
%type flight = :object {class: "com.mulesoft.training.Flight"}
---
payload.ns0#findFlightResponse.*return map {
	airlineName: $.airlineName,
	availableSeats: $.emptySeats as :number,
	departureDate: $.departureDate,
	destination: $.destination,
	flightCode: $.code,
	origination: $.origin,
	planeType: $.planeType replace /(Boing)/ with "Boeing",
	price: $.price as :number {format:"###.##"},
	totalSeats: lookup("getTotalSeats",{plane: $.planeType})
} as :flight]]></dw:set-payload>
		</dw:transform-message>
		<logger message="#[payload]" level="INFO" doc:name="Logger" />
	</flow>
	<flow name="getUnitedFlightsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/united" doc:name="HTTP" allowedMethods="GET" />
		<set-variable variableName="destination"
			value="#[(message.inboundProperties.'http.query.params'.code == empty) ? 'SFO' : message.inboundProperties.'http.query.params'.code]"
			doc:name="Set Destination" />
		<http:request config-ref="United_REST_Request_Configuration"
			path="/{destination}" method="GET" doc:name="United REST Request"
			metadata:id="8c54741c-8f75-4cd2-8cc5-179e248dc7b7">
			<http:request-builder>
				<http:uri-param paramName="destination" value="#[flowVars.destination]" />
			</http:request-builder>
		</http:request>
		<dw:transform-message doc:name="JSON to Java" metadata:id="06b7e65f-7277-4ec9-a820-3e5821273bbc">
			<dw:input-payload doc:sample="schemas-and-examples/united-flights-example.json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
%type flight = :object {class: "com.mulesoft.training.Flight"}
---
payload.flights map {
	airlineName: $.airlineName,
	departureDate: $.departureDate,
	destination: $.destination,
	emptySeats: $.emptySeats as :number,
	flightCode: $.code,
	origination: $.origin,
	planeType: $.planeType,
	price: $.price as :number {format: "###.##"},
	totalSeats: lookup("getTotalSeats",{plane: $.planeType})
} as :flight]]></dw:set-payload>
		</dw:transform-message>
		<logger level="INFO" doc:name="Logger" />
	</flow>
	<flow name="getBankAccountsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/bank/{ID}" allowedMethods="GET" doc:name="HTTP" />
		<http:request config-ref="Bank_REST_Request_Configuration"
			path="/customers/{customer_id}/accounts" method="GET" doc:name="Bank REST Request ">
			<http:request-builder>
				<http:uri-param paramName="customer_id"
					value="#[message.inboundProperties.'http.uri.params'.ID]" />
			</http:request-builder>
		</http:request>
	</flow>
	<flow name="apessentialsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/" doc:name="HTTP" />
		<set-payload value="#['Hello World'.toUpperCase()]"
			doc:name="Set Payload" />
		<set-property propertyName="qpname"
			value="#[message.inboundProperties.'http.query.params'.name]"
			doc:name="Property" />
		<set-variable variableName="qptype"
			value="#[message.inboundProperties.'http.query.params'.type]"
			doc:name="Variable" />
		<set-session-variable variableName="color" value="gray"
			doc:name="Session Variable" />
		<logger level="INFO" doc:name="Logger"
			message="#['Name: ' + message.outboundProperties.qpname + ' Type: ' + flowVars.qptype + ' Color: ' + sessionVars.color] " />
	</flow>
</mule>
